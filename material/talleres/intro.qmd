# Primeros Pasos

## Programaci√≥n

Si tuvi√©ramos que resumir el prop√≥sito de la programaci√≥n en una frase, ser√≠a:

> ‚ÄúAutomatizar tareas para que la computadora las realice por nosotros.

Cualquier labor tediosa y repetitiva deber√≠a ser delegada a una computadora, permitiendo as√≠ que los humanos se enfoquen en los problemas verdaderamente interesantes: aquellos que demandan creatividad, pensamiento cr√≠tico y subjetividad.

> ‚ÄúSe dice que uno no comprende verdaderamente algo hasta que puede explic√°rselo a otro. En realidad, uno no lo entiende completamente hasta que puede explic√°rselo a una computadora.‚Äù -- Donald Knuth

La programaci√≥n es la forma en la cual podemos detallarle a una computadora el paso a paso que queremos que realice. ¬°Cuando una computadora no hace lo que quer√≠amos, es porque no logramos explicitarlo de manera adecuada!

## Python

Python es un lenguaje de programaci√≥n que ha crecido en popularidad debido a 3 razones principales:

1. Es f√°cil de entender: un programa bien escrito se parece mucho al ingl√©s.
2. Posee muchas librer√≠as por defecto: toda instalaci√≥n de python viene con librer√≠as para un amplio tipo de aplicaciones (math, random, os, sys, time, datetime, etc.)
3. Es extensible:

## Ejecut√°ndo c√≥digo Python

Para utilizar Python en una computadora, es necesario:
1. Tener instalada alguna versi√≥n de Python
2. Escribir tu programa en un archivo (por ejemplo "mi_programa.py")
3. Ejecutar el programa con Python ("python mi_programa.py")

A medida que Python se fue haciendo m√°s popular, aparecieron otras alternativas de uso como los notebooks (Jupyter Nobooks, Google Colab y otros).

Por simplicidad, en la PySchool utilizaremos una tecnolog√≠a reciente que permite *emular* la ejecuci√≥n de Python en una p√°gina web. Esto es pr√°ctico pues esta p√°gina puede ser utilizada en cualquier dispositivo conectado a internet y no requiere instalaciones adicionales por parte del usuario, pero debe considerarse que es un ambiente de trabajo.

Existen 3 botones en la parte superior del contenedor de c√≥digo, para ejecutar el c√≥digo, reiniciar el c√≥digo inicial y copiar el c√≥digo.

![](../../images/botones.png){fig-align="center" width="100%" alt="Descripci√≥n de la imagen"}

## Ejemplo: üëã Hola Mundo

Es tradici√≥n en cualquier lenguaje de programaci√≥n comenzar haciendo que el computador imprimma la frase "Hola, Mundo" (o "Hello World") en la pantalla.

```{pyodide-python}
print("Hola, Mundo")
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
¬øC√≥mo podr√≠as hacer que en el c√≥digo anterior te saludara con tu nombre? ¬øPodr√≠as cambiar el saludo?
:::

Podemos mejorar el c√≥digo anterior utilizando **variables** que pueden entenderse como una caja con nombre donde puedes guardar algo, como un n√∫mero, texto, o cualquier otro tipo de informaci√≥n. Usas un nombre para referirte a esta caja (la variable), lo que te permite acceder a lo que has guardado dentro de ella m√°s adelante en tu programa. Puedes cambiar lo que est√° dentro de la caja en cualquier momento, simplemente guardando algo nuevo en ella.
```{pyodide-python}
saludo = "Hola "
nombre = "Chile"
print(saludo + nombre)
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
¬øQu√© significa el signo `+` en el ejemplo anterior? ¬øQu√© significan los simbolos `"`?
:::

Un principio fundamental de la programaci√≥n es el deseo del programador de minimizar la cantidad de trabajo.
Si hay l√≠neas de Python que se repite muchas veces en el programa, resulta conveniende "empaquetarlas" en una funci√≥n de manera que el c√≥digo sea m√°s compacto y no tengamos que realizar cambios en varios lugares distintos.

As√≠ por ejemplo podemos reducir el c√≥digo desde
```{pyodide-python}
saludo = "Hola "
nombre = "DUOC"
print(saludo + nombre)
saludo = "Que tal "
nombre = "Valpara√≠so"
print(saludo + nombre)
saludo = "Saludos "
nombre = "Chile"
print(saludo + nombre)
```

al siguiente c√≥digo
```{pyodide-python}
# Comentario: esta es la funci√≥n imprimir_saludo
def imprimir_saludo(saludo, nombre):
    print(saludo + " " + nombre)

imprimir_saludo("Hola", "DUOC")
imprimir_saludo("Que tal", "Valpara√≠so")
imprimir_saludo("Saludos", "Chile")
```

En este ejemplo hemos revisado la funci√≥n `print`, strings (cadenas de car√°cteres), variables y funciones.
Python proporciona muchas [funciones adicionales para manipular strings](https://python-docs-es.readthedocs.io/es/3.12/library/stdtypes.html#str). ¬øQue hacen las siguientes funciones?

```{pyodide-python}
mi_string = "¬øHoLa Ke HaCe?"
#print(mi_string)
#print(mi_string.upper())
#print(mi_string.lower())
#print(mi_string.title())
#print(mi_string.capitalize())
#print(mi_string.swapcase())
#print(mi_string.split())
```

Debes borrar el car√°cter `#` para que la l√≠nea deje de ser un comentario y se ejecute.