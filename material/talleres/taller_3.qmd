# Python en Ciencia de Datos

üéØ **Objetivos del cap√≠tulo**

- Explorar y analizar un conjunto de datos de Pok√©mon utilizando Python.
- Aprender t√©cnicas b√°sicas de exploraci√≥n y visualizaci√≥n de datos.
- Comprender c√≥mo aplicar an√°lisis de datos para obtener informaci√≥n relevante.
- Desarrollar habilidades pr√°cticas para visualizar datos de manera efectiva.


## üìä Exploraci√≥n y Visualizaci√≥n de Datos

Primero, importemos las bibliotecas necesarias y carguemos el conjunto de datos de Pok√©mon. Este ejercicio es excelente para practicar la manipulaci√≥n de datos y la visualizaci√≥n con las bibliotecas `pandas` y `matplotlib`.

### Cargar el Conjunto de Datos

En esta secci√≥n, cargaremos un conjunto de datos de Pok√©mon desde una URL y mostraremos las primeras filas para obtener una vista previa de los datos.

```{pyodide-python}
import pandas as pd

# Cargar el conjunto de datos de Pok√©mon
url = 'https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv'
pokemon_data = pd.read_csv(url)

# Mostrar las primeras filas del conjunto de datos
pokemon_data.head()
```

### Descripci√≥n del Conjunto de Datos

Obtenemos una visi√≥n general de las estad√≠sticas del conjunto de datos para comprender mejor la distribuci√≥n de los valores.

```{pyodide-python}
# Mostrar la descripci√≥n estad√≠stica del conjunto de datos
pokemon_data.describe()
```

## üìà An√°lisis y Visualizaci√≥n de Datos

### Tipos de Pok√©mon

Vamos a contar cu√°ntos Pok√©mon de cada tipo hay en el conjunto de datos y visualizaremos estos datos en un gr√°fico de barras.

```{pyodide-python}
import matplotlib.pyplot as plt

# Contar la cantidad de Pok√©mon por tipo
pokemon_por_tipo = pokemon_data['Type 1'].value_counts()

# Crear un gr√°fico de barras
plt.figure(figsize=(12, 6))
pokemon_por_tipo.plot(kind='bar', color='skyblue')
plt.title('Cantidad de Pok√©mon por Tipo')
plt.xlabel('Tipo')
plt.ylabel('Cantidad')
plt.show()
```

### Estad√≠sticas de Ataque y Defensa

Compararemos las estad√≠sticas de ataque y defensa de los Pok√©mon en un gr√°fico de dispersi√≥n.

```{pyodide-python}
# Crear un gr√°fico de dispersi√≥n de ataque vs defensa
plt.figure(figsize=(12, 6))
plt.scatter(pokemon_data['Attack'], pokemon_data['Defense'], color='purple', alpha=0.5)
plt.title('Ataque vs Defensa de Pok√©mon')
plt.xlabel('Ataque')
plt.ylabel('Defensa')
plt.show()
```

### Promedio de Estad√≠sticas por Tipo

Calcularemos y visualizaremos el promedio de las estad√≠sticas principales de los Pok√©mon agrupados por tipo en un gr√°fico de barras apiladas.

```{pyodide-python}
# Calcular el promedio de estad√≠sticas por tipo
promedio_estadisticas = pokemon_data.groupby('Type 1')[['HP', 'Attack', 'Defense', 'Speed']].mean()

# Crear un gr√°fico de barras apiladas
promedio_estadisticas.plot(kind='bar', stacked=True, figsize=(12, 8), color=['red', 'blue', 'green', 'orange'])
plt.title('Promedio de Estad√≠sticas por Tipo de Pok√©mon')
plt.xlabel('Tipo')
plt.ylabel('Promedio de Estad√≠sticas')
plt.legend(title='Estad√≠sticas')
plt.show()
```

### Peso y Altura de los Pok√©mon

Exploraremos la relaci√≥n entre el peso y la altura de los Pok√©mon utilizando las estad√≠sticas simuladas de `Weight` y `Height`.

```{pyodide-python}
# Nota: Este conjunto de datos no tiene 'Weight' y 'Height', as√≠ que simularemos datos
import numpy as np

# Agregar columnas de peso y altura simuladas
pokemon_data['Weight'] = np.random.uniform(5, 150, len(pokemon_data))  # Peso en kg
pokemon_data['Height'] = np.random.uniform(0.3, 2.5, len(pokemon_data))  # Altura en m

# Crear un gr√°fico de dispersi√≥n de peso vs altura
plt.figure(figsize=(12, 6))
plt.scatter(pokemon_data['Weight'], pokemon_data['Height'], color='green', alpha=0.5)
plt.title('Peso vs Altura de Pok√©mon')
plt.xlabel('Peso (kg)')
plt.ylabel('Altura (m)')
plt.show()
```

## üìä Tablas y Gr√°ficos Interactivos

### Tabla de Pok√©mon con Mayor Ataque

Mostraremos los 10 Pok√©mon con la mayor estad√≠stica de ataque.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor ataque
top_ataque = pokemon_data.nlargest(10, 'Attack')[['Name', 'Type 1', 'Attack', 'Defense', 'HP']]

# Mostrar la tabla
top_ataque
```

### Tabla de Pok√©mon con Mayor Defensa

Mostraremos los 10 Pok√©mon con la mayor estad√≠stica de defensa.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor defensa
top_defensa = pokemon_data.nlargest(10, 'Defense')[['Name', 'Type 1', 'Defense', 'Attack', 'HP']]

# Mostrar la tabla
top_defensa
```

### Explicaci√≥n del C√≥digo

1. **Importar Bibliotecas**:
    - `pandas`: Utilizado para la manipulaci√≥n de datos.
    - `matplotlib.pyplot`: Utilizado para la visualizaci√≥n de datos.
    - `numpy`: Utilizado para operaciones matem√°ticas y generaci√≥n de datos aleatorios.

2. **Cargar el Conjunto de Datos**:
    - Usamos `pd.read_csv` para cargar los datos desde una URL.
    - `pokemon_data.head()` muestra las primeras filas del conjunto de datos para obtener una vista previa.

3. **Descripci√≥n del Conjunto de Datos**:
    - `pokemon_data.describe()` proporciona estad√≠sticas descriptivas de las columnas num√©ricas del conjunto de datos.

4. **Visualizaci√≥n de Datos**:
    - **Tipos de Pok√©mon**: Contamos los Pok√©mon por tipo y creamos un gr√°fico de barras para visualizar las cantidades.
    - **Estad√≠sticas de Ataque y Defensa**: Creamos un gr√°fico de dispersi√≥n para comparar las estad√≠sticas de ataque y defensa.
    - **Promedio de Estad√≠sticas por Tipo**: Calculamos el promedio de las estad√≠sticas principales por tipo y creamos un gr√°fico de barras apiladas.
    - **Peso y Altura**: Simulamos datos de peso y altura y creamos un gr√°fico de dispersi√≥n para explorar la relaci√≥n entre estas variables.

5. **Tablas Interactivas**:
    - Mostramos tablas con los 10 Pok√©mon con las mayores estad√≠sticas de ataque y defensa utilizando `nlargest`.

Este ejercicio proporciona una excelente oportunidad para practicar la manipulaci√≥n y visualizaci√≥n de datos en Python, aplicando conceptos de an√°lisis de datos para explorar y entender un conjunto de datos real.