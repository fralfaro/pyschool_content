# Sobre Python

## introducción

[Python](https://www.python.org/) es un lenguaje de programación interpretado, de alto nivel y con una sintaxis clara y legible. Es conocido por su simplicidad y facilidad de uso, lo que lo hace ideal tanto para principiantes como para desarrolladores experimentados. Python es un lenguaje multiparadigma, lo que significa que admite la programación orientada a objetos, la programación imperativa y, en menor medida, la programación funcional.

**Características de Python**

- **Sintaxis Sencilla:** Python se centra en la legibilidad del código, lo que facilita su aprendizaje y comprensión.
- **Gran Comunidad:** Python cuenta con una amplia comunidad de usuarios y desarrolladores que contribuyen con bibliotecas, frameworks y herramientas.
- **Versatilidad:** Se utiliza en una variedad de campos, incluyendo desarrollo web, ciencia de datos, inteligencia artificial, automatización y más.
- **Portabilidad:** Python es multiplataforma, lo que significa que el código escrito en Python puede ejecutarse en diferentes sistemas operativos sin cambios significativos.


## Nomenclatura

La nomenclatura en Python es fundamental para escribir código claro y comprensible. Aquí se cubren las convenciones más importantes.

### Variables y Funciones
- **Variables:** se utilizan nombres en minúsculas con palabras separadas por guiones bajos.
  ```{pyodide-python}
  mi_variable = 10
  nombre_usuario = "Juan"
  ```
- **Funciones:** se siguen las mismas reglas que para las variables.
  ```{pyodide-python}
  def calcular_area(radio):
      return 3.14159 * radio * radio
  ```

### Clases
- **Clases:** se utiliza la notación CamelCase.
  ```{pyodide-python}
  class MiClase:
      def __init__(self, atributo):
          self.atributo = atributo
  ```

### Constantes
- **Constantes:** se escriben en mayúsculas con palabras separadas por guiones bajos.
  ```{pyodide-python}
  MAXIMO_VALOR = 100
  ```

## 4. Control de Flujo

El control de flujo permite dirigir la ejecución del programa según condiciones y bucles.

### Condicionales
```{pyodide-python}
x = 10
if x > 5:
    print("x es mayor que 5")
elif x == 5:
    print("x es igual a 5")
else:
    print("x es menor que 5")
```

### Bucles

#### Bucle `for`
```{pyodide-python}
for i in range(5):
    print(i)
```

#### Bucle `while`
```{pyodide-python}
contador = 0
while contador < 5:
    print(contador)
    contador += 1
```

## 5. Estructura de Datos

Python proporciona varias estructuras de datos incorporadas.

### Listas
```{pyodide-python}
mi_lista = [1, 2, 3, 4, 5]
mi_lista.append(6)
print(mi_lista)
```

### Tuplas
```{pyodide-python}
mi_tupla = (1, 2, 3)
print(mi_tupla[1])
```

### Conjuntos
```{pyodide-python}
mi_conjunto = {1, 2, 3, 4}
mi_conjunto.add(5)
print(mi_conjunto)
```

### Diccionarios
```{pyodide-python}
mi_diccionario = {"nombre": "Juan", "edad": 30}
print(mi_diccionario["nombre"])
```

## 6. Funciones

Las funciones son bloques de código reutilizables que realizan una tarea específica.

### Definición de una Función
```{pyodide-python}
def saludar(nombre):
    print(f"Hola, {nombre}")

saludar("Ana")
```

### Parámetros y Retorno
```{pyodide-python}
def sumar(a, b):
    return a + b

resultado = sumar(3, 4)
print(resultado)
```

### Funciones Lambda
```{pyodide-python}
doblar = lambda x: x * 2
print(doblar(5))
```

## 7. Excepciones

El manejo de excepciones permite gestionar errores en el código de manera controlada.

### Try, Except
```{pyodide-python}
try:
    division = 10 / 0
except ZeroDivisionError:
    print("No se puede dividir por cero")
```

### Finally
```{pyodide-python}
try:
    archivo = open("mi_archivo.txt", "r")
except FileNotFoundError:
    print("Archivo no encontrado")
finally:
    print("Esto se ejecuta siempre")
```

## 8. Buenas Prácticas

Seguir buenas prácticas mejora la mantenibilidad y legibilidad del código.

### Comentarios
- Usa comentarios para explicar el "por qué" del código.
  ```{pyodide-python}
  # Calcula el área de un círculo
  def calcular_area(radio):
      return 3.14159 * radio * radio
  ```

### Documentación
- Documenta tus funciones usando docstrings.
  ```{pyodide-python}
  def sumar(a, b):
      """
      Suma dos números.

      Parámetros:
      a (int): El primer número.
      b (int): El segundo número.

      Retorna:
      int: La suma de a y b.
      """
      return a + b
  ```

### Formato de Código
- Sigue las guías de estilo como PEP 8.
  - Usa indentación de 4 espacios.
  - Mantén las líneas debajo de 79 caracteres.
  ```{pyodide-python}
  def funcion_larga(argumento1, argumento2, argumento3,
                    argumento4, argumento5, argumento6):
      pass
  ```

### Evitar Código Duplicado
- Usa funciones y clases para evitar repetir código.

### Nombres Significativos
- Usa nombres de variables y funciones que sean descriptivos.
  ```{pyodide-python}
  # Malo
  x = 10

  # Bueno
  cantidad_de_usuarios = 10
  ```


Este artículo proporciona una visión general de las prácticas recomendadas y conceptos fundamentales en Python, junto con ejemplos claros y prácticos. Siguiendo estas directrices, puedes escribir código Python que sea eficiente, legible y fácil de mantener.
