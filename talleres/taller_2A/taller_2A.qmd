# Ciencia tradicional

Python ha demostrado ser una herramienta invaluable en diversas ramas de la ciencia tradicional.
Su simplicidad, combinada con su potencia, permite a los científicos y profesionales abordar problemas complejos de manera eficiente.

Desde cálculos matemáticos y simulaciones físicas hasta análisis estadísticos, Python proporciona un conjunto robusto de bibliotecas y
herramientas que facilitan estas tareas.

## Matemática

Python es una herramienta poderosa para resolver problemas matemáticos, desde cálculos básicos hasta análisis complejos.

### Cálculos Básicos
Pyodide-enabled code cell, usando `{pyodide-python}`: Esto permite código completamente ejecutable - ¡el usuario puede modificar el código y ejecutarlo!

Código directo:
```{pyodide-python}
# Hola mundo en Python
print('Hola mundo!')

# Cálculos básicos
a = 10
b = 5
suma = a + b
resta = a - b
multiplicacion = a * b
division = a / b

print(f'Suma: {suma}')
print(f'Resta: {resta}')
print(f'Multiplicación: {multiplicacion}')
print(f'División: {division}')
```

### Álgebra Lineal
Usando la biblioteca `numpy`:
```{pyodide-python}
import numpy as np

# Definición de matrices
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Suma de matrices
C = A + B
print(f'Suma de matrices:\n{C}')

# Producto de matrices
D = np.dot(A, B)
print(f'Producto de matrices:\n{D}')
```

## Física

Python se usa ampliamente en la física para simular sistemas y analizar datos experimentales.

### Simulación de Movimiento
Simulación del movimiento de un objeto bajo la influencia de la gravedad usando la biblioteca `matplotlib` para la visualización:
```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt

# Parámetros de la simulación
g = 9.8  # aceleración debido a la gravedad (m/s^2)
t = np.linspace(0, 5, num=100)  # tiempo (s)
v0 = 20  # velocidad inicial (m/s)
theta = np.radians(45)  # ángulo de lanzamiento (grados)

# Componentes de la velocidad inicial
vx = v0 * np.cos(theta)
vy = v0 * np.sin(theta)

# Trayectoria
x = vx * t
y = vy * t - 0.5 * g * t**2

# Gráfica de la trayectoria
plt.plot(x, y)
plt.title('Trayectoria de un proyectil')
plt.xlabel('Distancia horizontal (m)')
plt.ylabel('Altura (m)')
plt.ylim(bottom=0)
plt.show()
```

## Estadística

Python proporciona herramientas robustas para análisis estadístico, utilizando bibliotecas como `pandas` y `scipy`.

### Descripción de Datos
Usando `pandas` para analizar un conjunto de datos:
```{pyodide-python}
import pandas as pd

# Creación de un DataFrame
data = {
    'Edad': [25, 30, 35, 40, 45],
    'Ingresos': [50000, 60000, 70000, 80000, 90000]
}
df = pd.DataFrame(data)

# Estadísticas descriptivas
descripcion = df.describe()
print(descripcion)
```

### Pruebas de Hipótesis
Usando `scipy` para realizar una prueba t de muestras independientes:
```{pyodide-python}
from scipy import stats

# Datos de ejemplo
grupo1 = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
grupo2 = [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]

# Prueba t de muestras independientes
t_stat, p_value = stats.ttest_ind(grupo1, grupo2)
print(f'Estadístico t: {t_stat}')
print(f'Valor p: {p_value}')
```


